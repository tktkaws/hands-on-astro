---
import { ViewTransitions } from "astro:transitions";
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import Tag from "../components/Tag.astro";
import { newtClient } from "../lib/newt";
import { getArticleByTags, getArticleByPrice } from "../lib/api";
import type { Article, Tag } from "../lib/newt";

const { items: articles } = await newtClient.getContents<Article>({
	appUid: "blog",
	modelUid: "article",
	query: {
		select: ["title", "slug", "body", "coverImage", "price", "type"],
	},
});
// console.log(articles[0].type);

const { items: tags } = await newtClient.getContents<Tag>({
	appUid: "blog",
	modelUid: "tag",
	query: {
		select: ["name", "slug", "_id"],
	},
});

const firstTargetItem = tags.find((tag) => tag.name === "フロントエンド");
const firstItems = await getArticleByTags(firstTargetItem._id);
console.log(firstItems[0].tags);

const secondTargetItem = tags.find((tag) => tag.name === "コーダー");
const secondItems = await getArticleByTags(secondTargetItem._id);

const lowArticles = await getArticleByPrice("~¥4,999");
// console.log(lowArticles);
---

<Layout
	title="HANDS-ON"
	description="コーダー/フロントエンドエンジニアを目指す初学者のためのハンズオン教材紹介サイト"
>
	<main>
		<div class="list-container">
			<h2 class="heading2">{firstTargetItem.name}</h2>
			<ul class="l-card-list">
				{
					firstItems.map((item) => {
						return (
							<>
								<Card article={item} />
							</>
						);
					})
				}
			</ul>
		</div>
		<div class="list-container">
			<h2 class="heading2">{secondTargetItem.name}</h2>
			<ul class="l-card-list">
				{
					secondItems.map((item) => {
						return (
							<>
								<Card article={item} />
							</>
						);
					})
				}
			</ul>
		</div>
		<div class="list-container">
			<h2 class="heading2">All Articles</h2>
			<ul class="l-card-list">
				{
					articles.map((article) => {
						return (
							<>
								<Card article={article} />
							</>
						);
					})
				}
			</ul>
		</div>
		<div class="list-container">
			<h2 class="heading2">~¥4,999</h2>
			<ul class="l-card-list">
				{
					articles.map((article) => {
						return (
							<>
								<Card article={article} />
							</>
						);
					})
				}
			</ul>
		</div>
		<div class="list-container">
			<h2 class="heading2">TAG</h2>
			<div class="l-tag-list">
				{
					tags.map((tag) => {
						return <Tag tag={tag} />;
					})
				}
			</div>
		</div>
	</main>
</Layout>

<style lang="scss">
	.list-container {
		margin-top: 2rem;
		display: grid;
		grid-template-columns: 1fr 1000px 1fr;
		display: grid;
		grid-template-columns: 1fr 1084px 1fr;

		@media only screen and (max-width: 1184px) {
			grid-template-columns: 1fr 90% 1fr;
		}

		& > * {
			grid-column: 2;
		}
	}
	.l-card-list {
		display: flex;
		gap: 2rem;
		margin-top: 2rem;
		flex-wrap: wrap;
	}
	.l-tag-list {
		display: flex;
		gap: 2rem;
		margin-top: 2rem;
		margin-bottom: 2rem;
	}
	.heading2 {
		font-size: 2rem;
		font-weight: bold;
		border-bottom: solid 1px;
	}
	/* The default transition for non-fragment visits */
	.is-changing .transition-main {
		transition-property: opacity, transform;
		transition-duration: 250ms;
	}
	html.is-animating .transition-main {
		opacity: 0;
		transform: translateY(-20px);
	}
	html.is-leaving .transition-main {
		transform: translateY(20px);
	}

	/*
 * The transition when filtering the characters.
 * Here, we are animating the `.teaeser` elements individually
 */
	#characters-list.is-changing {
		--duration-leave: 150ms;
		--duration-enter: 400ms;
		transition-duration: var(--duration-enter);
	}
	#characters-list.is-leaving {
		transition-duration: var(--duration-leave);
	}
	#characters-list.is-changing .teaser {
		transition-property: opacity, transform;
		transition-duration: var(--duration-enter);
		transition-timing-function: cubic-bezier(
			0.23,
			1,
			0.32,
			1
		); /* easeOutQuint */
	}
	#characters-list.is-animating .teaser {
		opacity: 0;
		transform: scale(0.75);
	}
	/* Change easing and duration for the leave-phase */
	#characters-list.is-leaving .teaser {
		transition-timing-function: ease-in;
		transition-duration: var(--duration-leave);
	}

	/*
* The animation for opening and closing the character modal
*/
	#character-modal.is-changing {
		transition: opacity 300ms;
	}
	#character-modal.is-animating {
		opacity: 0;
	}

	/* Zoom-Effect for the character detail when opening/closing the modal */
	#character-modal.is-changing #character-detail {
		transition: transform 150ms;
		transform: scale(1);
	}
	#character-modal.to-open-character.is-animating #character-detail,
	#character-modal.to-close-character.is-leaving #character-detail {
		transform: scale(0.95);
	}

	/* Animate the backdrop of the modal */
	#character-modal::backdrop {
		transition: opacity 300ms;
	}
	#character-modal.is-animating::backdrop,
	.is-animating #character-modal::backdrop {
		opacity: 0;
	}

	/*
* The animation between charcter details. Directional animation based on data-swup-animation
*/
	#character-detail.is-changing {
		transition:
			opacity 200ms,
			transform 200ms;
	}
	#character-detail.to-next {
		--direction: 1;
	}
	#character-detail.to-previous {
		--direction: -1;
	}
	#character-detail.is-animating {
		opacity: 0;
		transform: translateX(calc(40px * var(--direction)));
	}
	#character-detail.is-leaving {
		transform: translateX(calc(40px * var(--direction) * -1));
	}
</style>
